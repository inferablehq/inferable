"use client";

import { useState } from "react";
import { useAuth } from "@clerk/nextjs";
import { Button } from "./ui/button";
import { Cpu } from "lucide-react";
import { cn, createErrorToast } from "@/lib/utils";
import { client } from "@/client/client";
import toast from "react-hot-toast";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import Link from "next/link";

export function QuickStartDemo({ clusterId }: { clusterId: string }) {
  const [status, setStatus] = useState<"creating" | "created" | "error">();
  const { getToken } = useAuth();
  const [actualCommand, setActualCommand] = useState<string>(
    "npx @inferable/demo@latest run --secret=sk_inf_***"
  );
  const [displayCommand, setDisplayCommand] = useState<string>(
    "npx @inferable/demo@latest run --secret=sk_inf_***"
  );
  const [showCommandDialog, setShowCommandDialog] = useState(false);

  const handleCopy = async () => {
    setStatus("creating");
    const name = `autogenerated-demo-${Math.random().toString(36).substring(2, 10)}`;

    const result = await client
      .createApiKey({
        headers: { authorization: `Bearer ${await getToken()}` },
        params: { clusterId },
        body: { name },
      })
      .catch(err => {
        setStatus("error");
        createErrorToast(err, "Failed to create API key");

        return {
          status: -1,
          body: null,
        } as const;
      });

    if (result.status === 200) {
      const newCommand = `npx @inferable/demo@latest run --secret=${result.body.key}`;
      const key = result.body.key;
      const redactedKey = key.substring(0, 10) + "*".repeat(key.length - 10);
      const redactedCommand = `npx @inferable/demo@latest run --secret=${redactedKey}`;

      setActualCommand(newCommand);
      setDisplayCommand(redactedCommand);
      try {
        await navigator.clipboard.writeText(newCommand);
        toast.success("Copied to clipboard");
        setStatus("created");
      } catch (err) {
        setShowCommandDialog(true);
        setStatus("error");
      }
    } else {
      setStatus("error");
      createErrorToast(result, "Failed to create API key");
    }
  };

  const getStatusText = () => {
    switch (status) {
      case "creating":
        return "Creating API key...";
      case "created":
        return "Copied to clipboard âœ…";
      case "error":
        return "Error creating key";
      default:
        return "Click to copy";
    }
  };

  return (
    <div className="rounded-xl p-5 shadow-sm border border-gray-200 bg-gray-50/50 transition-all duration-200">
      <div className="flex items-center gap-4">
        <div className="h-10 w-10 rounded-full bg-gray-100 flex items-center justify-center">
          <Cpu className="w-5 h-5 text-gray-600" />
        </div>
        <div>
          <div className="text-base font-medium text-gray-900">Quick Start</div>
          <div className="text-sm text-gray-500">
            Run this on your terminal for a quick demo.{" "}
            <Link
              target="_blank"
              className="underline text-blue-500"
              href="https://github.com/inferablehq/inferable/blob/main/demos/typescript"
            >
              Source code
            </Link>
          </div>
        </div>
      </div>

      <div className="mt-4 space-y-2">
        <Button
          onClick={handleCopy}
          variant="outline"
          className={cn(
            "h-auto py-4 font-mono text-sm group relative overflow-hidden transition-all",
            "bg-black hover:bg-black/80 border-gray-800 text-white hover:text-white",
            "flex items-center gap-2 w-full max-w-full",
            status === "creating" && "opacity-70 cursor-wait"
          )}
          disabled={status === "creating"}
        >
          <span className="text-left truncate flex-1 min-w-0">
            {displayCommand.substring(0, 55)}
          </span>
          <span
            className={cn(
              "text-xs px-2 py-1 rounded-md transition-colors whitespace-nowrap",
              status === "created"
                ? "bg-green-500/20 text-green-300"
                : status === "error"
                  ? "bg-red-500/20 text-red-300"
                  : status === "creating"
                    ? "bg-yellow-500/20 text-yellow-300"
                    : "bg-gray-700 text-gray-300"
            )}
          >
            {getStatusText()}
          </span>
        </Button>
      </div>

      <Dialog open={showCommandDialog} onOpenChange={setShowCommandDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Copy Command</DialogTitle>
            <DialogDescription>
              Unable to copy automatically. Please copy the command manually:
            </DialogDescription>
          </DialogHeader>
          <div className="bg-black/90 p-4 rounded-md">
            <pre className="text-white text-sm font-mono whitespace-pre-wrap break-all">
              {actualCommand}
            </pre>
          </div>
          <DialogFooter>
            <Button onClick={() => setShowCommandDialog(false)}>Close</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}
